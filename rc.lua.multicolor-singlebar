--[[
                                      
     Multicolor Awesome WM config 2.0 
     github.com/copycat-killer        
                                      
--]]


-- {{{ Required libraries
local gears     = require("gears")
local awful     = require("awful")
awful.rules     = require("awful.rules")
require("awful.autofocus")
local wibox     = require("wibox")
local beautiful = require("beautiful")
local naughty   = require("naughty")
local drop      = require("scratchdrop")
local lain      = require("lain")
-- }}}

menubar   = require("menubar")
menubar.cache_entries = true
menubar.show_categories = false

table.insert(menubar.menu_gen.all_menu_dirs, 1, "/home/jan/.local/share/applications/")
menubar.menu_gen.all_categories["WebApp"] = {app_type = "WebApp", name = "Web Application", icon_name = "applications-multimedia.png", use = true}

-- {{{ Error handling
if awesome.startup_errors then
    naughty.notify({ preset = naughty.config.presets.critical,
                     title = "Oops, there were errors during startup!",
                     text = awesome.startup_errors })
end

do
    local in_error = false
    awesome.connect_signal("debug::error", function (err)
        if in_error then return end
        in_error = true

        naughty.notify({ preset = naughty.config.presets.critical,
                         title = "Oops, an error happened!",
                         text = err })
        in_error = false
    end)
end
-- }}}

-- {{{ Autostart applications
function run_once(cmd)
  findme = cmd
  firstspace = cmd:find(" ")
  if firstspace then
     findme = cmd:sub(0, firstspace-1)
  end
  awful.util.spawn_with_shell("pgrep -u $USER -x " .. findme .. " > /dev/null || (" .. cmd .. ")")
end

--run_once("urxvtd")
run_once("unclutter")
-- }}}

-- {{{ Variable definitions
-- localization
os.setlocale(os.getenv("LANG"))

-- beautiful init
beautiful.init(awful.util.getdir("config") .. "/themes/multicolor-singlebar/theme.lua")

-- common
modkey     = "Mod4"
altkey     = "Mod1"
terminal   = "roxterm" or "xfce4-terminal"
editor     = os.getenv("EDITOR") or "vim" or "nano"
editor_cmd = terminal .. " -e " .. editor

function edit_in_terminal(path)
  working_dir = path:match("(.*/)")
  return terminal .. " -d " .. working_dir .. " -e '" .. editor .. " " .. path .. "'"
end

local layouts = {
    awful.layout.suit.tile.bottom,
    awful.layout.suit.tile,
    awful.layout.suit.tile.top,
    awful.layout.suit.tile.left,
    awful.layout.suit.fair,
    awful.layout.suit.fair.horizontal,
    awful.layout.suit.spiral,
    awful.layout.suit.spiral.dwindle,
    awful.layout.suit.max,
    awful.layout.suit.max.fullscreen,
    awful.layout.suit.magnifier,
    awful.layout.suit.floating
}
-- }}}

-- {{{ Tags
tags = {}
for s = 1, screen.count() do
    -- Each screen has its own tag table.
    tags[s] = awful.tag({ 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }, s, layouts[1])
end
-- }}}

-- {{{ Wallpaper
--if beautiful.wallpaper then
    --for s = 1, screen.count() do
        --gears.wallpaper.maximized(beautiful.wallpaper, s, true)
    --end
--end
-- }}}

-- {{{ Freedesktop Menu
require("freedesktop/freedesktop")
-- }}}

-- {{{ Wibox
markup      = lain.util.markup

-- Textclock
clockicon = wibox.widget.imagebox(beautiful.widget_clock)
mytextclock = awful.widget.textclock(markup("#7788af", "%A %d %B ") .. markup("#343639", ">") .. markup("#de5e1e", " %H:%M "))

-- Calendar
lain.widgets.calendar:attach(mytextclock, { font_size = 10 })

-- Task
taskwidget = lain.widgets.task:attach(clockicon, { font_size = 10 })

-- Weather
--weathericon = wibox.widget.imagebox(beautiful.widget_weather)
--yawn = lain.widgets.yawn(2132574, {
    --settings = function()
        --widget:set_markup(markup("#eca4c4", forecast:lower() .. " @ " .. units .. "°C "))
    --end
--})

-- / fs
fsicon = wibox.widget.imagebox(beautiful.widget_fs)
fswidget = lain.widgets.fs({
    settings  = function()
        widget:set_markup(markup("#80d9d8", used .. "% "))
    end
})

-- CPU
cpuicon = wibox.widget.imagebox()
cpuicon:set_image(beautiful.widget_cpu)
cpuwidget = lain.widgets.cpu({
    settings = function()
        widget:set_markup(markup("#e33a6e", cpu_now.usage .. "% "))
    end
})

-- Coretemp
--tempicon = wibox.widget.imagebox(beautiful.widget_temp)
--tempwidget = lain.widgets.temp({
    --settings = function()
        --widget:set_markup(markup("#f1af5f", coretemp_now .. "°C "))
    --end
--})

-- Battery
baticon = wibox.widget.imagebox(beautiful.widget_batt)
batwidget = lain.widgets.bat({
    settings = function()
        if bat_now.perc == "N/A" then
            bat_now.perc = "AC "
        else
            bat_now.perc = bat_now.perc .. "% "
        end
        widget:set_text(bat_now.perc)
    end
})

-- ALSA volume
volicon = wibox.widget.imagebox(beautiful.widget_vol)
volumewidget = lain.widgets.alsa({
    settings = function()
        if volume_now.status == "off" then
            volume_now.level = volume_now.level .. "M"
        end
        widget:set_markup(markup("#7493d2", volume_now.level .. "% "))
    end
})

-- Net 
netdownicon = wibox.widget.imagebox(beautiful.widget_netdown)
--netdownicon.align = "middle"
netdowninfo = wibox.widget.textbox()
netupicon = wibox.widget.imagebox(beautiful.widget_netup)
--netupicon.align = "middle"
netupinfo = lain.widgets.net({
    settings = function()
        widget:set_markup(markup("#e54c62", net_now.sent .. " "))
        netdowninfo:set_markup(markup("#87af5f", net_now.received .. " "))
    end
})

-- MEM
memicon = wibox.widget.imagebox(beautiful.widget_mem)
memwidget = lain.widgets.mem({
    settings = function()
        widget:set_markup(markup("#e0da37", mem_now.used .. "M "))
    end
})

-- MPD
mpdicon = wibox.widget.imagebox()
mpdwidget = lain.widgets.mpd({
    settings = function()
        mpd_notification_preset = {
            text = string.format("%s [%s] - %s\n%s", mpd_now.artist,
                   mpd_now.album, mpd_now.date, mpd_now.title)
        }

        if mpd_now.state == "play" then
            artist = mpd_now.artist .. " > "
            title  = mpd_now.title .. " "
            mpdicon:set_image(beautiful.widget_note_on)
        elseif mpd_now.state == "pause" then
            artist = "mpd "
            title  = "paused "
        else
            artist = ""
            title  = ""
            mpdicon:set_image(nil)
        end
        widget:set_markup(markup("#e54c62", artist) .. markup("#b2b2b2", title))
    end
})

-- Spacer
spacer = wibox.widget.textbox(" ")

-- }}}

-- {{{ Layout

-- Create a wibox for each screen and add it
mywibox = {}
mypromptbox = {}
mylayoutbox = {}
mytaglist = {}
mytaglist.buttons = awful.util.table.join(
                    awful.button({ }, 1, awful.tag.viewonly),
                    awful.button({ modkey }, 1, awful.client.movetotag),
                    awful.button({ }, 3, awful.tag.viewtoggle),
                    awful.button({ modkey }, 3, awful.client.toggletag),
                    awful.button({ }, 4, function(t) awful.tag.viewnext(awful.tag.getscreen(t)) end),
                    awful.button({ }, 5, function(t) awful.tag.viewprev(awful.tag.getscreen(t)) end)
                    )
mytasklist = {}
mytasklist.buttons = awful.util.table.join(
                     awful.button({ }, 1, function (c)
                                              if c == client.focus then
                                                  c.minimized = true
                                              else
                                                  -- Without this, the following
                                                  -- :isvisible() makes no sense
                                                  c.minimized = false
                                                  if not c:isvisible() then
                                                      awful.tag.viewonly(c:tags()[1])
                                                  end
                                                  -- This will also un-minimize
                                                  -- the client, if needed
                                                  client.focus = c
                                                  c:raise()
                                              end
                                          end),
                     awful.button({ }, 3, function ()
                                              if instance then
                                                  instance:hide()
                                                  instance = nil
                                              else
                                                  instance = awful.menu.clients({ width=250 })
                                              end
                                          end),
                     awful.button({ }, 4, function ()
                                              awful.client.focus.byidx(1)
                                              if client.focus then client.focus:raise() end
                                          end),
                     awful.button({ }, 5, function ()
                                              awful.client.focus.byidx(-1)
                                              if client.focus then client.focus:raise() end
                                          end))

for s = 1, screen.count() do
    
    -- Create a promptbox for each screen
    mypromptbox[s] = awful.widget.prompt()

    
    -- We need one layoutbox per screen.
    mylayoutbox[s] = awful.widget.layoutbox(s)
    mylayoutbox[s]:buttons(awful.util.table.join(
                            awful.button({ }, 1, function () awful.layout.inc(layouts, 1) end),
                            awful.button({ }, 3, function () awful.layout.inc(layouts, -1) end),
                            awful.button({ }, 4, function () awful.layout.inc(layouts, 1) end),
                            awful.button({ }, 5, function () awful.layout.inc(layouts, -1) end)))

    -- Create a taglist widget
    mytaglist[s] = awful.widget.taglist(s, awful.widget.taglist.filter.all, mytaglist.buttons)

    -- Create a tasklist widget
    mytasklist[s] = awful.widget.tasklist(s, awful.widget.tasklist.filter.currenttags, mytasklist.buttons)

    -- Create the upper wibox
    mywibox[s] = awful.wibox({ position = "top", screen = s }) 
    --border_width = 0, height =  20 })
        
    -- Widgets that are aligned to the upper left
    local left_layout = wibox.layout.fixed.horizontal()
    left_layout:add(mytaglist[s])
    left_layout:add(mylayoutbox[s])
    if s == 1 then left_layout:add(wibox.widget.systray()) end
    left_layout:add(mypromptbox[s])

    -- Widgets that are aligned to the upper right
    local right_layout = wibox.layout.fixed.horizontal()
    --right_layout:add(mailicon)
    --right_layout:add(mailwidget)
    right_layout:add(netdownicon)
    right_layout:add(netdowninfo)
    right_layout:add(netupicon)
    right_layout:add(netupinfo)
    right_layout:add(volicon)
    right_layout:add(volumewidget)
    right_layout:add(memicon)
    right_layout:add(memwidget)
    right_layout:add(cpuicon)
    right_layout:add(cpuwidget)
    right_layout:add(fsicon)
    right_layout:add(fswidget)
    right_layout:add(mpdicon)
    right_layout:add(mpdwidget)
    --right_layout:add(weathericon)
    --right_layout:add(yawn.widget)
    --right_layout:add(tempicon)
    --right_layout:add(tempwidget)
    right_layout:add(baticon)
    right_layout:add(batwidget)
    right_layout:add(clockicon)
    right_layout:add(mytextclock)

    -- Now bring it all together (with the tasklist in the middle)
    local layout = wibox.layout.align.horizontal()
    layout:set_left(left_layout)
    layout:set_middle(mytasklist[s])
    layout:set_right(right_layout)
    
    mywibox[s]:set_widget(layout)
end
-- }}}

-- {{{ Mouse Bindings
root.buttons(awful.util.table.join(
    awful.button({ }, 3, function () mymainmenu:toggle() end),
    awful.button({ }, 4, awful.tag.viewnext),
    awful.button({ }, 5, awful.tag.viewprev)
))
-- }}}

function notes_completion(command, cur_pos, ncomp, shell)
  prefix = "vim /home/jan/Dropbox/notes/"
  cmd = prefix .. command
  cur_pos = cur_pos + prefix:len()

  str, cur_pos, output = awful.completion.shell(cmd, cur_pos, ncomp, 'zsh')

  str = str:gsub(prefix, '')
  cur_pos = cur_pos - prefix:len()

  return str, cur_pos, output
end

function documents_completion(command, cur_pos, ncomp, shell)
  prefix = "xdgopen /home/jan/Dropbox/books/"
  cmd = prefix .. command
  cur_pos = cur_pos + prefix:len()

  str, cur_pos, output = awful.completion.shell(cmd, cur_pos, ncomp, 'zsh')

  str = str:gsub(prefix, '')
  cur_pos = cur_pos - prefix:len()

  return str, cur_pos, output
end

-- {{{ Key bindings
globalkeys = awful.util.table.join(
    -- Tag browsing
    awful.key({ modkey }, ",",   awful.tag.viewprev       ),
    awful.key({ modkey }, ".",  awful.tag.viewnext       ),
    awful.key({ modkey }, "Tab", awful.tag.history.restore),

    awful.key({ modkey, "Shift"   }, ".",
      function ()
        local idx = awful.tag.getidx()
        if idx == 10 then
          awful.client.movetotag(tags[client.focus.screen][1])
        else
          awful.client.movetotag(tags[client.focus.screen][idx+1])
        end
      end),
    awful.key({ modkey, "Shift"   }, ",",
      function ()
        local idx = awful.tag.getidx()
        if idx == 1 then
          awful.client.movetotag(tags[client.focus.screen][10])
        else
          awful.client.movetotag(tags[client.focus.screen][idx-1])
        end
      end),

    -- Non-empty tag browsing
    awful.key({ modkey, altkey }, ",", function () lain.util.tag_view_nonempty(-1) end),
    awful.key({ modkey, altkey }, ".", function () lain.util.tag_view_nonempty(1) end),

    -- Default client focus
    awful.key({ modkey, altkey }, "k",
        function ()
            awful.client.focus.byidx( 1)
            if client.focus then client.focus:raise() end
        end),
    awful.key({ modkey, altkey }, "j",
        function ()
            awful.client.focus.byidx(-1)
            if client.focus then client.focus:raise() end
        end),

    -- By direction client focus
    awful.key({ modkey }, "j",
        function()
            awful.client.focus.bydirection("down")
            if client.focus then client.focus:raise() end
        end),
    awful.key({ modkey }, "k",
        function()
            awful.client.focus.bydirection("up")
            if client.focus then client.focus:raise() end
        end),
    awful.key({ modkey }, "h",
        function()
            awful.client.focus.bydirection("left")
            if client.focus then client.focus:raise() end
        end),
    awful.key({ modkey }, "l",
        function()
            awful.client.focus.bydirection("right")
            if client.focus then client.focus:raise() end
        end),

    awful.key({ modkey, "Shift" }, "j",
      function ()
        awful.client.swap.bydirection("down")
      end),
    awful.key({ modkey, "Shift" }, "k",
      function ()
        awful.client.swap.bydirection("up")
      end),
    awful.key({ modkey, "Shift" }, "h",
      function ()
        awful.client.swap.bydirection("left")
      end),
    awful.key({ modkey, "Shift" }, "l",
      function ()
        awful.client.swap.bydirection("right")
      end),

    -- Show Menu
    awful.key({ modkey }, "Escape",
        function ()
            mymainmenu:show({ keygrabber = true })
        end),

    -- Show/Hide Wibox
    awful.key({ modkey }, "b", function ()
        mywibox[mouse.screen].visible = not mywibox[mouse.screen].visible
    end),

    -- Layout manipulation
    awful.key({ modkey, "Shift"   }, "s", function () awful.screen.focus_relative( 1) end),
    awful.key({ modkey, "Shift"   }, "s", function () awful.screen.focus_relative(-1) end),
    awful.key({ modkey,           }, "w", function () awful.screen.focus(1) end),
    awful.key({ modkey,           }, "e", function () awful.screen.focus(screen.count()) end),
    awful.key({ modkey,           }, "u", awful.client.urgent.jumpto),
    awful.key({ altkey,           }, "Tab",
        function ()
            awful.client.focus.history.previous()
            if client.focus then
                client.focus:raise()
            end
        end),
    awful.key({ modkey,           }, "Up",     function () awful.tag.incmwfact( 0.05)     end),
    awful.key({ modkey,           }, "Down",   function () awful.tag.incmwfact(-0.05)     end),
    awful.key({ modkey,           }, "Left",   function () awful.tag.incnmaster( 1)       end),
    awful.key({ modkey,           }, "Right",  function () awful.tag.incnmaster(-1)       end),
    awful.key({ modkey, "Shift"   }, "Left",   function () awful.tag.incncol(-1)          end),
    awful.key({ modkey, "Shift"   }, "Right",  function () awful.tag.incncol( 1)          end),
    awful.key({ modkey,           }, "space",  function () awful.layout.inc(layouts,  1)  end),
    awful.key({ modkey, "Shift"   }, "space",  function () awful.layout.set(awful.layout.suit.tile)  end),
    awful.key({ modkey,           }, "f",      function () awful.layout.set(awful.layout.suit.max)  end),

    -- Standard program
    awful.key({ modkey,           }, "Return", function () awful.util.spawn(terminal) end),
    --awful.key({ modkey, "Shift"   }, "Return", function () awful.util.spawn(terminal .. " -e /home/jan/scripts/tmux_tasks") end),
    awful.key({ modkey,           }, "m",      function () awful.util.spawn(terminal .. " -e 'fish -c mc'") end),
    awful.key({ modkey, "Shift"   }, "m",      function () awful.util.spawn("thunar") end),
    awful.key({ modkey,           }, "t",      lain.widgets.task.prompt_add),
    awful.key({ modkey, "Shift"   }, "t",      lain.widgets.task.prompt),
    awful.key({ modkey, altkey    }, "t",      lain.widgets.task.show),
    awful.key({ modkey,           }, "Delete", function () awful.util.spawn("xscreensaver-command -lock") end),

    awful.key({ modkey,           }, "q",      awesome.restart),
    awful.key({ modkey, "Shift"   }, "q",      awesome.quit),

    awful.key({ modkey, "Shift"   }, "n",
      function ()
        file = "/home/jan/Dropbox/notes/worklog/" .. string.lower(os.date("%Y-%m-%d-%a"))
        awful.util.spawn(edit_in_terminal(file))
      end),

    -- Dropdown terminal
    awful.key({ modkey,	          }, "`",      function () drop(terminal .. " -e /home/jan/scripts/tmux_tasks", "top", "center", 1, 0.42, true) end),

    -- Widgets popups
    awful.key({ modkey, altkey    }, "c",      function () lain.widgets.calendar:show(7) end),
    awful.key({ modkey, altkey    }, "h",      function () fswidget.show(7) end),
    awful.key({ modkey, altkey    }, "w",      function () yawn.show(7) end),
    awful.key({ modkey, altkey    }, "m",      function () awful.util.spawn(terminal .. " -e ncmpcpp") end),

    -- mpd control
    awful.key({}, "XF86AudioPlay",
        function ()
            awful.util.spawn("mpc toggle")
        end),

    awful.key({}, "XF86AudioPrev",
        function ()
            awful.util.spawn("mpc prev")
        end),

    awful.key({}, "XF86AudioNext",
        function ()
            awful.util.spawn("mpc next")
        end),

    -- ALSA volume control
    awful.key({}, "XF86AudioRaiseVolume",
        function ()
            awful.util.spawn("amixer -q set Master 1%+")
            volumewidget.update()
        end),
    awful.key({}, "XF86AudioLowerVolume",
        function ()
            awful.util.spawn("amixer -q set Master 1%-")
            volumewidget.update()
        end),
    awful.key({}, "XF86AudioMute",
        function ()
            awful.util.spawn("amixer -q set Master playback toggle")
            volumewidget.update()
        end),
    awful.key({ modkey }, "XF86AudioMute",
        function ()
            awful.util.spawn("amixer -q set Master playback 100%")
            volumewidget.update()
        end),

    -- Brightness control
    awful.key({}, "XF86MonBrightnessUp",
        function ()
            awful.util.spawn("sudo /home/jan/scripts/brightness.rb up")
        end),
    awful.key({}, "XF86MonBrightnessDown",
        function ()
            awful.util.spawn("sudo /home/jan/scripts/brightness.rb down")
        end),

    -- MPD control
    --awful.key({ altkey, "Control" }, "Up",
        --function ()
            --awful.util.spawn_with_shell("mpc toggle || ncmpcpp toggle || ncmpc toggle || pms toggle")
            --mpdwidget.update()
        --end),
    --awful.key({ altkey, "Control" }, "Down",
        --function ()
            --awful.util.spawn_with_shell("mpc stop || ncmpcpp stop || ncmpc stop || pms stop")
            --mpdwidget.update()
        --end),
    --awful.key({ altkey, "Control" }, "Left",
        --function ()
            --awful.util.spawn_with_shell("mpc prev || ncmpcpp prev || ncmpc prev || pms prev")
            --mpdwidget.update()
        --end),
    --awful.key({ altkey, "Control" }, "Right",
        --function ()
            --awful.util.spawn_with_shell("mpc next || ncmpcpp next || ncmpc next || pms next")
            --mpdwidget.update()
        --end),

    -- Edit rc.lua
    awful.key({ modkey,           }, "c",      function () awful.util.spawn(edit_in_terminal(awesome.conffile)) end),

    -- Prompt
    awful.key({ modkey, "Shift"   }, "p",      function () mypromptbox[mouse.screen]:run() end),

    awful.key({ modkey }, "x",
              function ()
                  awful.prompt.run({ prompt = "Run Lua code: " },
                  mypromptbox[mouse.screen].widget,
                  awful.util.eval, nil,
                  awful.util.getdir("cache") .. "/history_eval")
              end),

    awful.key({ modkey }, "d",
              function ()
                  awful.prompt.run({ prompt = "Copy to clipboard: " },
                  mypromptbox[mouse.screen].widget,
                  function (...)
                    awful.util.spawn("/home/jan/scripts/args2clipboard.sh " .. ...)
                  end,
                  nil,
                  awful.util.getdir("cache") .. "/history_clipboard")
              end),

    awful.key({ modkey, "Shift" }, "d",
              function ()
                  awful.prompt.run({ prompt = "Lookup password: " },
                  mypromptbox[mouse.screen].widget,
                  function (...)
                    awful.util.spawn("/home/jan/scripts/password2clipboard.sh " .. ...)
                  end,
                  nil,
                  "/dev/null")
              end),

    awful.key({ modkey }, "n",
              function ()
                  awful.prompt.run({ prompt = "Write note: " },
                  mypromptbox[mouse.screen].widget,
                  function (...)
                    awful.util.spawn(edit_in_terminal("/home/jan/Dropbox/notes/" .. ...))
                  end,
                  notes_completion,
                  awful.util.getdir("cache") .. "/history_notes")
              end),

    awful.key({ modkey }, "o",
              function ()
                  awful.prompt.run({ prompt = "Open document: " },
                  mypromptbox[mouse.screen].widget,
                  function (...)
                    awful.util.spawn("xdg-open /home/jan/Dropbox/books/" .. ...)
                  end,
                  documents_completion,
                  awful.util.getdir("cache") .. "/history_documents")
              end),

    -- Menubar
    awful.key({ modkey }, "p", function() menubar.show() end)
)

clientkeys = awful.util.table.join(
    awful.key({ modkey, "Shift"   }, "f",      function (c) c.fullscreen = not c.fullscreen  end),
    awful.key({ modkey, "Shift"   }, "c",      function (c) c:kill()                         end),
    awful.key({ modkey,           }, "'",      awful.client.floating.toggle                     ),
    awful.key({ modkey, "Shift"   }, "'",      function (c) c:swap(awful.client.getmaster()) end),
    awful.key({ modkey, "Shift"   }, "o",      awful.client.movetoscreen                        )
)

-- Compute the maximum number of digit we need, limited to 9
keynumber = 0
for s = 1, screen.count() do
   keynumber = math.min(10, math.max(#tags[s], keynumber))
end

-- Bind all key numbers to tags.
-- Be careful: we use keycodes to make it works on any keyboard layout.
-- This should map on the top row of your keyboard, usually 1 to 9.
-- Keycode of key 1 is 10, so we pass "#10" as 2nd param to awful.key
for i = 1, keynumber do
    globalkeys = awful.util.table.join(globalkeys,
        awful.key({ modkey }, "#" .. i + 9,
                  function ()
                        local screen = mouse.screen
                        if tags[screen][i] then
                            awful.tag.viewonly(tags[screen][i])
                        end
                  end),
        awful.key({ modkey, "Control" }, "#" .. i + 9,
                  function ()
                      local screen = mouse.screen
                      if tags[screen][i] then
                          awful.tag.viewtoggle(tags[screen][i])
                      end
                  end),
        awful.key({ modkey, "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus and tags[client.focus.screen][i] then
                          awful.client.movetotag(tags[client.focus.screen][i])
                      end
                  end),
        awful.key({ modkey, "Control", "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus and tags[client.focus.screen][i] then
                          awful.client.toggletag(tags[client.focus.screen][i])
                      end
                  end))
end

clientbuttons = awful.util.table.join(
    awful.button({ }, 1, function (c) client.focus = c; c:raise() end),
    awful.button({ modkey }, 1, awful.mouse.client.move),
    awful.button({ modkey }, 3, awful.mouse.client.resize))

-- Set keys
root.keys(globalkeys)
-- }}}

-- {{{ Rules
awful.rules.rules = {
    -- All clients will match this rule.
    { rule = { },
      properties = { border_width = 2, --beautiful.border_width,
                     border_color = beautiful.border_normal,
                     focus = awful.client.focus.filter,
                     size_hints_honor = false,
                     keys = clientkeys,
                     buttons = clientbuttons } },
    { rule = { class = "Chromium", instance = "chromium" },
      properties = { tag = tags[1][1], floating = true, maximized_vertical = false, maximized_horizontal = false } },
    { rule = { instance = "www.evernote.com__Home.action" },
      properties = { floating = true } },
    { rule = { instance = "plugin-container" },
      properties = { floating = true } },
    { rule = { class = "Hotot" },
      properties = { floating = true } },
    { rule = { class = "hotot-qt5" },
      properties = { floating = true } },
    { rule = { class = "Steam" },
      properties = { floating = true } },
    { rule = { instance = "exe" },
      properties = { floating = true } },
    { rule = { class = "MPlayer" },
      properties = { floating = true, border_width = 0 } },
    { rule = { class = "Smplayer" },
      properties = { floating = true } },
    { rule = { class = "Litecoin-qt" },
      properties = { floating = true } },
    { rule = { class = "Bitcoin-qt" },
      properties = { floating = true } },
    { rule = { class = "Hotot-qt" },
      properties = { floating = true, border_width = 0 } },
    { rule = { class = "Yunio" },
      properties = { floating = true, border_width = 0 } },
    { rule = { class = "Choqok" },
      properties = { floating = true, border_width = 0 } },
    { rule = { class = "Goldendict" },
      properties = { floating = true } },
    { rule = { class = "pinentry" },
      properties = { floating = true } },
    { rule = { class = "gimp" },
      properties = { floating = true } },
    { rule = { class = "Keepnote" },
      properties = { floating = true } },
    { rule = { class = "Shutter" },
      properties = { floating = true } },
    { rule = { name = "CrossOver" },
      properties = { floating = true } },
    { rule = { class = "Android SDK Manager" },
      properties = { floating = true } },
    { rule = { class = "Pavucontrol" },
      properties = { floating = true } },
    { rule = { class = "Pavumeter" },
      properties = { floating = true } },
    { rule = { class = "Hipchat" },
      properties = { screen = screen.count(), tag = tags[screen.count()][2], border_width = 0 } },
    { rule = { class = "Pidgin" },
      properties = { floating = true, screen = screen.count(), tag = tags[screen.count()][10] } },
    { rule = { class = "Skype" },
      properties = { floating = true, screen = screen.count(), tag = tags[screen.count()][10] } },
    { rule = { class = "Chromium", name = "Hangouts" },
      properties = { floating = true } },
    { rule = { instance = "www.xiami.com__space_radio-fav_u_495809" },
      properties = { floating = false, screen = screen.count(), tag = tags[screen.count()][2], border_width = 0 } },
    { rule = { instance = "play.google.com__music" },
      properties = { floating = false, screen = screen.count(), tag = tags[screen.count()][2], border_width = 0 } }
    -- Set Firefox to always map on tags number 2 of screen 1.
    -- { rule = { class = "Firefox" },
    --   properties = { tag = tags[1][2] } },
}
-- }}}

-- {{{ Signals
-- Signal function to execute when a new client appears.
client.connect_signal("manage", function (c, startup)
    -- Enable sloppy focus
    c:connect_signal("mouse::enter", function(c)
        if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier
            and awful.client.focus.filter(c) then
            client.focus = c
        end
    end)

    if not startup and not c.size_hints.user_position
       and not c.size_hints.program_position then
        awful.placement.no_overlap(c)
        awful.placement.no_offscreen(c)
    end
end)

-- No border for maximized clients
client.connect_signal("focus",
    function(c)
        if c.maximized_horizontal == true and c.maximized_vertical == true then
            c.border_width = 0
            c.border_color = beautiful.border_normal
        elseif c.class == 'MPlayer' then
            c.border_width = 0
            c.border_color = beautiful.border_normal
        else
            c.border_width = beautiful.border_width
            c.border_color = beautiful.border_focus
        end
    end)
client.connect_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)
-- }}}

-- {{{ Arrange signal handler
--for s = 1, screen.count() do screen[s]:connect_signal("arrange", function ()
        --local clients = awful.client.visible(s)
        --local layout  = awful.layout.getname(awful.layout.get(s))

        --if #clients > 0 then -- Fine grained borders and floaters control
            --for _, c in pairs(clients) do -- Floaters always have borders
                --if awful.client.floating.get(c) or layout == "floating" then
                    --c.border_width = beautiful.border_width

                ---- No borders with only one visible client
                --elseif #clients == 1 or layout == "max" then
                    --clients[1].border_width = 0
                    --awful.client.moveresize(0, 0, 2, 2, clients[1])
                --else
                    --c.border_width = beautiful.border_width
                --end
            --end
        --end
      --end)
--end
-- }}}

-- {{{ Function definitions

-- scan directory, and optionally filter outputs
function scandir(directory, filter)
    local i, t, popen = 0, {}, io.popen
    if not filter then
        filter = function(s) return true end
    end
    print(filter)
    for filename in popen('ls -a "'..directory..'"'):lines() do
        if filter(filename) then
            i = i + 1
            t[i] = filename
        end
    end
    return t
end

-- }}}

-- configuration - edit to your liking
wp_index = 1
wp_timeout  = 9000
wp_path = "/home/jan/Pictures/lovewallpaper/"
wp_filter = function(s) return string.match(s,"%.png$") or string.match(s,"%.jpg$") end
wp_files = scandir(wp_path, wp_filter)
 
wp_index = math.random(1, #wp_files)
for s = 1, screen.count() do
  gears.wallpaper.maximized(wp_path .. wp_files[wp_index], s, true)
end

-- setup the timer
wp_timer = timer { timeout = wp_timeout }
wp_timer:connect_signal("timeout", function()
 
  -- set wallpaper to current index for all screens
  for s = 1, screen.count() do
    gears.wallpaper.maximized(wp_path .. wp_files[wp_index], s, true)
  end
 
  -- stop the timer (we don't need multiple instances running at the same time)
  wp_timer:stop()
 
  -- get next random index
  wp_index = math.random( 1, #wp_files)
 
  --restart the timer
  wp_timer.timeout = wp_timeout
  wp_timer:start()
end)
 
-- initial start when rc.lua is first run
wp_timer:start()
